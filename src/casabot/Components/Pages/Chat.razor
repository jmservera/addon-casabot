@page "/"
@page "/chat"
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@rendermode InteractiveServer

<PageTitle>Casa Bot Chat</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <h1>üè† Casa Bot</h1>
        <p>Your Home Assistant companion with voice and text support</p>
    </div>

    <div class="chat-messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "assistant-message")">
                <div class="message-content">
                    <div class="message-text">
                        @message.Content
                    </div>
                    @if (!string.IsNullOrEmpty(message.AudioUrl))
                    {
                        <div class="message-audio">
                            <audio controls>
                                <source src="@message.AudioUrl" type="audio/wav">
                                Your browser does not support audio playback.
                            </audio>
                        </div>
                    }
                    <div class="message-time">
                        @message.Timestamp.ToString("HH:mm")
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <div class="input-group">
            <input @bind="currentMessage" 
                   @onkeypress="HandleKeyPress" 
                   @ref="textInput"
                   class="message-input" 
                   placeholder="Type your message..." 
                   disabled="@isProcessing" />
            
            <button @onclick="ToggleRecording" 
                    class="mic-button @(isRecording ? "recording" : "")"
                    disabled="@isProcessing">
                @if (isRecording)
                {
                    <span>üî¥</span>
                }
                else
                {
                    <span>üé§</span>
                }
            </button>
            
            <button @onclick="SendMessage" 
                    class="send-button"
                    disabled="@(isProcessing || string.IsNullOrWhiteSpace(currentMessage))">
                üì§
            </button>
        </div>
        
        @if (isProcessing)
        {
            <div class="processing-indicator">
                Casa Bot is thinking...
            </div>
        }
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .chat-header {
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e0e0e0;
    }

    .chat-header h1 {
        margin: 0;
        color: #2c3e50;
        font-size: 2rem;
    }

    .chat-header p {
        margin: 0.5rem 0 0 0;
        color: #7f8c8d;
        font-size: 1rem;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem 0;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        margin-bottom: 1rem;
    }

    .user-message {
        justify-content: flex-end;
    }

    .assistant-message {
        justify-content: flex-start;
    }

    .message-content {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        position: relative;
    }

    .user-message .message-content {
        background-color: #007bff;
        color: white;
        border-bottom-right-radius: 0.25rem;
    }

    .assistant-message .message-content {
        background-color: #f8f9fa;
        color: #333;
        border: 1px solid #dee2e6;
        border-bottom-left-radius: 0.25rem;
    }

    .message-text {
        word-wrap: break-word;
        margin-bottom: 0.5rem;
    }

    .message-audio {
        margin: 0.5rem 0;
    }

    .message-audio audio {
        width: 100%;
        height: 30px;
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        text-align: right;
    }

    .chat-input-container {
        border-top: 2px solid #e0e0e0;
        padding-top: 1rem;
    }

    .input-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .message-input {
        flex: 1;
        padding: 0.75rem;
        border: 2px solid #dee2e6;
        border-radius: 0.5rem;
        font-size: 1rem;
        outline: none;
    }

    .message-input:focus {
        border-color: #007bff;
    }

    .message-input:disabled {
        background-color: #f8f9fa;
        opacity: 0.6;
    }

    .mic-button, .send-button {
        padding: 0.75rem;
        border: none;
        border-radius: 0.5rem;
        font-size: 1.25rem;
        cursor: pointer;
        background-color: #6c757d;
        color: white;
        transition: all 0.2s;
        min-width: 50px;
    }

    .mic-button:hover, .send-button:hover {
        opacity: 0.8;
    }

    .mic-button:disabled, .send-button:disabled {
        opacity: 0.4;
        cursor: not-allowed;
    }

    .mic-button.recording {
        background-color: #dc3545;
        animation: pulse 1s infinite;
    }

    .send-button {
        background-color: #28a745;
    }

    .send-button:disabled {
        background-color: #6c757d;
    }

    .processing-indicator {
        text-align: center;
        margin-top: 0.5rem;
        font-style: italic;
        color: #6c757d;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
</style>

@code {
    private List<ChatMessage> messages = new();
    private string currentMessage = "";
    private bool isProcessing = false;
    private bool isRecording = false;
    private ElementReference messagesContainer;
    private ElementReference textInput;

    protected override async Task OnInitializedAsync()
    {
        // Add welcome message
        messages.Add(new ChatMessage
        {
            Content = "Hello! I'm Casa Bot, your Home Assistant companion. You can type messages or use the microphone to talk to me. How can I help you today?",
            IsUser = false,
            Timestamp = DateTime.Now
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await textInput.FocusAsync();
        }
        
        // Scroll to bottom of messages
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(currentMessage))
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isProcessing)
            return;

        var userMessage = currentMessage.Trim();
        currentMessage = "";
        isProcessing = true;

        // Add user message
        messages.Add(new ChatMessage
        {
            Content = userMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        StateHasChanged();

        try
        {
            // Send to MCP and get response
            var response = await ChatService.SendMessageAsync(userMessage);
            
            // Add assistant response
            messages.Add(new ChatMessage
            {
                Content = response.Text,
                IsUser = false,
                Timestamp = DateTime.Now,
                AudioUrl = response.AudioUrl
            });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
            {
                Content = $"Sorry, I encountered an error: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
            await textInput.FocusAsync();
        }
    }

    private async Task ToggleRecording()
    {
        if (isProcessing)
            return;

        if (isRecording)
        {
            await StopRecording();
        }
        else
        {
            await StartRecording();
        }
    }

    private async Task StartRecording()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startRecording");
            isRecording = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to start recording: {ex.Message}");
        }
    }

    private async Task StopRecording()
    {
        try
        {
            isRecording = false;
            isProcessing = true;
            StateHasChanged();

            var audioData = await JSRuntime.InvokeAsync<string>("stopRecording");
            
            if (!string.IsNullOrEmpty(audioData))
            {
                // Add user message indicating voice input
                messages.Add(new ChatMessage
                {
                    Content = "[Voice message]",
                    IsUser = true,
                    Timestamp = DateTime.Now
                });

                StateHasChanged();

                // Send audio to MCP and get response
                var response = await ChatService.SendAudioAsync(audioData);
                
                // Add assistant response
                messages.Add(new ChatMessage
                {
                    Content = response.Text,
                    IsUser = false,
                    Timestamp = DateTime.Now,
                    AudioUrl = response.AudioUrl
                });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
            {
                Content = $"Sorry, I encountered an error processing your voice message: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}